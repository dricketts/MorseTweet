package { 	import flash.display.MovieClip;	import flash.display.Sprite;  	import flash.events.IOErrorEvent;  	import flash.events.ProgressEvent;  	import flash.net.URLRequest;  	import flash.net.URLRequestHeader;  	import flash.net.URLRequestMethod;  	import flash.net.URLStream;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.utils.ByteArray;	import flash.events.MouseEvent;	    public class MorseTweets extends Sprite    {		private const url = "/proxy.php?sd=stream&path=1/statuses/filter.json";				private var stream:URLStream; // the connection to the streaming API		private var usernameField:TextField;		private var startStreamButton:Sprite;				public function MorseTweets() {			usernameField = createInputTextField("Username", 10, 10, 30, 200);			createGoButton(100,100);		}				private function createInputTextField(label:String, x:int, y:int, height:int, width:int):TextField {			var theTextField:TextField = new TextField();			theTextField.type = TextFieldType.INPUT;			theTextField.border = true;			theTextField.x = x;			theTextField.y = y;			theTextField.height = height;			theTextField.width = width;			theTextField.multiline = true;			theTextField.wordWrap = true;			addChild(theTextField);			return theTextField;		}				private function createGoButton(x:int, y:int) {			var textLabel:TextField = new TextField();			startStreamButton = new Sprite();			startStreamButton.x = x;			startStreamButton.y = y;            startStreamButton.graphics.clear();            startStreamButton.graphics.beginFill(0xD4D4D4); // grey color            startStreamButton.graphics.drawRoundRect(0, 0, 80, 25, 10, 10); // x, y, width, height, ellipseW, ellipseH            startStreamButton.graphics.endFill();            textLabel.text = "Start Stream";            textLabel.x = 3;            textLabel.y = 2;            textLabel.selectable = false;			addChild(startStreamButton);            startStreamButton.addChild(textLabel);			startStreamButton.addEventListener(MouseEvent.MOUSE_DOWN, startStreamListener);		}				private function startStreamListener(event:MouseEvent) {			initiateStream(usernameField.text);		}				private function initiateStream(username:String) {			amountRead = 0;        	streamBuffer = "";        	var request:URLRequest = createStreamRequest(url, username);        	stream = new URLStream();        	stream.addEventListener(IOErrorEvent.IO_ERROR, errorReceived);        	stream.addEventListener(ProgressEvent.PROGRESS, dataReceived);        	stream.load(request);			trace(request.requestHeaders);		}				private function createStreamRequest(url:String, username:String):URLRequest {      		var request:URLRequest = new URLRequest(url);      		request.method = URLRequestMethod.POST;      		request.data = 0;      		return request;    	}				// a simple helper that will base-64 encode a string    	private function b64encode(s:String):String {			var toencode = new ByteArray();			toencode.writeMultiByte(s, "utf-8");      		return Base64.encode(toencode);    	}				private function encodeStringForTransport(s:String):String {      		return s.split("%").join("%25").split("\\").join("%5c").split("\"").join("%22").split("&").join("%26");    	}				// parse the incoming data stream -- this will call out to "streamEvent"    	// in javascript with the JSON    	private var amountRead:int = 0;    	private var isReading:Boolean = false;    	private var streamBuffer:String = "";    	private function dataReceived(pe:ProgressEvent):void {      		var toRead:Number = pe.bytesLoaded - amountRead;      		var buffer:String = stream.readUTFBytes(toRead);      		amountRead = pe.bytesLoaded;      		// attempt to restart the stream      		var parts:Array;      		if (!isReading) {        		parts = buffer.split(/\n/);        		var firstPart:String = parts[0].replace(/[\s\n]*/, "");        		if (firstPart != "")					trace(firstPart);          			//ExternalInterface.call("streamEvent", encodeStringForTransport(firstPart));        		buffer = parts.slice(1).join("\n");        		isReading = true;      		}      		// pump the JSON pieces through -- due to actionscript to javascript      		// encoding issues, we have to wrap them funnily      		if ((toRead > 0) && (amountRead > 0)) {        		streamBuffer += buffer;        		parts = streamBuffer.split(/\n/);        		var lastElement:String = parts.pop();        		parts.forEach(function(s:String, i:int, a:Array):void {					trace(s);          			//ExternalInterface.call("streamEvent", encodeStringForTransport(s));        		});        		streamBuffer = lastElement;      		}   		}    	// call out to javascript that there was an error in the stream    	private function errorReceived(io:IOErrorEvent):void {			trace(io);      		//ExternalInterface.call("streamError");    	}		    } }